{"version":3,"sources":["app/routes/RouteWithSubRoutes.tsx","app/routes/RenderRoutes.tsx","app/routes/config.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["RouteWithSubRoutes","route","console","log","fallback","path","component","routes","RenderRoutes","map","key","exact","to","lazy","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4JAIaA,EAAqB,SAACC,GAEjC,OADAC,QAAQC,IAAI,6BAA8BF,GAExC,kBAAC,WAAD,CAAUG,SAAU,4CAClB,kBAAC,IAAD,CAAOC,KAAMJ,EAAMI,MACjB,kBAACJ,EAAMK,UAAP,iBAAqBL,EAArB,CAA4BM,OAAQN,EAAMM,aCJrCC,EAAyD,SAAC,GAAgB,IAAdD,EAAa,EAAbA,OACvE,OACE,kBAAC,IAAD,KACGA,EAAOE,KAAI,SAACR,GAAD,OACV,kBAAC,EAAD,iBAAwBA,EAAxB,CAA+BS,IAAKT,EAAMS,a,+HCGrCH,EAA6B,CACxC,CACEG,IAAK,OACLL,KAAM,IACNM,OAAO,EACPL,UAAW,kBAAM,kBAAC,IAAD,CAAUM,GAAG,YAGhC,CACEF,IAAK,YACLL,KAAM,IACNM,OAAO,EACPL,UAAWO,gBAAK,kBAAM,sDACtBN,OAAQ,CACN,CACEG,IAAK,OACLL,KAAM,QACNM,OAAO,EACPL,UAAWO,gBAAK,kBAAM,uDAExB,CACEH,IAAK,QACLL,KAAM,SACNM,OAAO,EACPL,UAAWO,gBAAK,kBAAM,iCAExB,CACEH,IAAK,UACLL,KAAM,WACNM,OAAO,EACPL,UAAWO,gBAAK,kBAAM,wDAExB,CACEH,IAAK,aACLL,KAAM,cACNM,OAAO,EACPL,UAAWO,gBAAK,kBAAM,iCAExB,CACEH,IAAK,SACLL,KAAM,UACNM,OAAO,EACPL,UAAWO,gBAAK,kBAAM,oCC9CfC,EAJH,WACV,OAAO,kBAACN,EAAA,EAAD,CAAcD,OAAQA,KCOXQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.009cff53.chunk.js","sourcesContent":["import React, { Suspense } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { RouteConfigProps } from \"./config\";\r\n\r\nexport const RouteWithSubRoutes = (route: RouteConfigProps) => {\r\n  console.log(\"RouteWithSubRoutes route: \", route);\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Route path={route.path}>\r\n        <route.component {...route} routes={route.routes} />\r\n      </Route>\r\n    </Suspense>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Switch } from \"react-router-dom\";\r\nimport { RouteConfigProps } from \"./config\";\r\nimport { RouteWithSubRoutes } from \"./RouteWithSubRoutes\";\r\n\r\nexport const RenderRoutes: React.FC<{ routes: RouteConfigProps[] }> = ({ routes }) => {\r\n  return (\r\n    <Switch>\r\n      {routes.map((route) => (\r\n        <RouteWithSubRoutes {...route} key={route.key} />\r\n      ))}\r\n    </Switch>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ComponentType, lazy, LazyExoticComponent } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nexport interface RouteConfigProps {\r\n  key: string;\r\n  path: string;\r\n  exact: boolean;\r\n  component: LazyExoticComponent<ComponentType<any>> | (() => JSX.Element);\r\n  routes?: RouteConfigProps[];\r\n}\r\n\r\nexport const routes: RouteConfigProps[] = [\r\n  {\r\n    key: \"ROOT\",\r\n    path: \"/\",\r\n    exact: true,\r\n    component: () => <Redirect to=\"/home\" />,\r\n  },\r\n  // create new object here. This mimic shopee.co.id routing behavior.\r\n  {\r\n    key: \"HOME_ROOT\",\r\n    path: \"/\",\r\n    exact: false,\r\n    component: lazy(() => import(\"features/Home/Home\")),\r\n    routes: [\r\n      {\r\n        key: \"Home\",\r\n        path: \"/home\",\r\n        exact: true,\r\n        component: lazy(() => import(\"features/Home/Projects/Projects\")),\r\n      },\r\n      {\r\n        key: \"About\",\r\n        path: \"/about\",\r\n        exact: true,\r\n        component: lazy(() => import(\"features/Home/About/About\")),\r\n      },\r\n      {\r\n        key: \"Contact\",\r\n        path: \"/contact\",\r\n        exact: true,\r\n        component: lazy(() => import(\"features/Home/Contact/Contact\")),\r\n      },\r\n      {\r\n        key: \"Motivation\",\r\n        path: \"/motivation\",\r\n        exact: true,\r\n        component: lazy(() => import(\"features/Home/Motivation/Motivation\")),\r\n      },\r\n      {\r\n        key: \"Values\",\r\n        path: \"/values\",\r\n        exact: true,\r\n        component: lazy(() => import(\"features/Home/Values/Values\")),\r\n      },\r\n    ],\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport { RenderRoutes } from \"./routes/RenderRoutes\";\r\nimport { routes } from \"./routes/config\";\r\n\r\nconst App = () => {\r\n  return <RenderRoutes routes={routes} />;\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}